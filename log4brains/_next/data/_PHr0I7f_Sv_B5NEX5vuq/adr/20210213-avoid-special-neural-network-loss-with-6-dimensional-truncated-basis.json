{"pageProps":{"projectName":"Kinetic Transfer Gan","currentAdr":{"slug":"20210213-avoid-special-neural-network-loss-with-6-dimensional-truncated-basis","package":null,"title":"Avoid special neural network loss with six dimensional truncated basis","status":"proposed","supersededBy":null,"tags":["gan","pytorch"],"deciders":["fire"],"body":{"enhancedMdx":"\n## Context and Problem Statement\n\nThe neural network requires special treatment because we use quaternions. The quaternion orientation format is not continuous.\n\n## Decision Drivers <!-- optional -->\n\n- Slow improvement on performance\n- Simplicity\n\n## Considered Options\n\n- Basis 3x3 matrix\n- Quaternion\n- Euler\n- 6D Truncation 3x3 Basis\n\n## Decision Outcome\n\nChoose 6D Truncation 3x3 basis because its theory is the simplest, and the paper mathematically proved it was accurate.\n\n### Positive Consequences <!-- optional -->\n\n- Better training gain\n- The code is simpler to understand\n\n### Negative Consequences <!-- optional -->\n\n- Work to change to new representation\n\n## Pros and Cons of the Options <!-- optional -->\n\n### Basis 3x3 matrix\n\nBasis 3x3 matrix.\n\n- Good, because continuous\n- Bad, because it uses nine rather than six floats.\n- Bad, because space inefficient\n\n### Quaternion\n\nThe status quo is the Quaternion.\n\n- Good, because it is standard\n- Good, because the status quo\n- Bad, because it has poles.\n\n### Euler\n\n- Bad, no.\n- â€¦ <!-- numbers of pros and cons can vary -->\n\n### 6D Truncation 3x3 Basis\n\nA basis is a 3x3 matrix. The Basis is normalized.\n\n```c++\n//x_raw is the X Axis / first row of the basis\n//y_raw is the Y Axis / second row of the basis.\n\n// On the Continuity of Rotation Representations in Neural Networks\n// arXiv:1812.07035\nBasis compute_rotation_matrix_from_ortho_6d(Vector3 x_raw, Vector3 y_raw) {\n    Vector3 x = x_raw.normalized();\n    Vector3 z = x.cross(y_raw);\n    z = z.normalized();\n    Vector3 y = z.cross(x);\n    Basis basis;\n    basis.set_axis(Vector3::AXIS_X, x);\n    basis.set_axis(Vector3::AXIS_Y, y);\n    basis.set_axis(Vector3::AXIS_Z, z);\n    return basis;\n}\n```\n\n- Good, because it's space-efficient with six floats\n- Bad, because it's not standard\n\n## Links <!-- optional -->\n\n- https://arxiv.org/pdf/1812.07035.pdf\n"},"creationDate":"2021-02-14T00:21:29.000Z","lastEditDate":"2021-02-14T00:52:08.000Z","lastEditAuthor":"K. S. Ernest (iFire) Lee","publicationDate":"2021-02-14T07:59:59.000Z","file":{"relativePath":"docs/decisions/20210213-avoid-special-neural-network-loss-with-6-dimensional-truncated-basis.md","absolutePath":"/home/runner/work/kinetic-transfer-gan/kinetic-transfer-gan/docs/decisions/20210213-avoid-special-neural-network-loss-with-6-dimensional-truncated-basis.md"},"repository":{"provider":"github","viewUrl":"https://github.com/fire/kinetic-transfer-gan/blob/master/docs/decisions/20210213-avoid-special-neural-network-loss-with-6-dimensional-truncated-basis.md"}},"l4bVersion":"1.0.0-beta.8"},"__N_SSG":true}